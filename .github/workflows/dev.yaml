name: Space Manager CI Pipeline

on:
  push:
    branches:
      - 'develop'

env:
  CLUSTER_NAME: develop
  CLUSTER_RESOURCE_GROUP: CLUSTER_RESOURCE_GROUP
  NAMESPACE: default
  SECRET: acr-secret
  PROFILE: dev
  APP_NAME: space-manager
  DEPLOYMENT_NAME: space-manager-statefulset-1

jobs:
  Build-Deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Connect to Azure Container Registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: 'desapex.azurecr.io'
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set Release version env variable
        run: |
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Show extracted Maven project version
        run: echo ${{ steps.project.outputs.version }}

      # Build the Dockerfile image
      - name: Build
        run: |-
          docker build -t "desapex.azurecr.io/$CLUSTER_RESOURCE_GROUP/$APP_NAME:$RELEASE_VERSION" .

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -

      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: 'desapex.azurecr.io'
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          arguments: --force true

      # Push the Dockerfile image to Google Container Registry
      - name: Publish
        run: |-
          docker tag "desapex.azurecr.io/$CLUSTER_RESOURCE_GROUP/$APP_NAME:$RELEASE_VERSION" "desapex.azurecr.io/$CLUSTER_RESOURCE_GROUP/$APP_NAME-$PROFILE:$GITHUB_SHA"
          docker rmi "desapex.azurecr.io/$CLUSTER_RESOURCE_GROUP/$APP_NAME:$RELEASE_VERSION"
          docker tag "desapex.azurecr.io/$CLUSTER_RESOURCE_GROUP/$APP_NAME-$PROFILE:$GITHUB_SHA" "desapex.azurecr.io/$CLUSTER_RESOURCE_GROUP/$APP_NAME-$PROFILE:latest"
          docker push "desapex.azurecr.io/$CLUSTER_RESOURCE_GROUP/$APP_NAME-$PROFILE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Dockerfile image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image desapex.azurecr.io/PROJECT_ID/IMAGE:TAG=desapex.azurecr.io/$CLUSTER_RESOURCE_GROUP/$APP_NAME-$PROFILE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status statefulset/$DEPLOYMENT_NAME
          kubectl get services -o wide